{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Griffe TypingDoc","text":"<p>Griffe extension for PEP 727 \u2013 Documentation Metadata in Typing.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install griffe-typingdoc\n</code></pre></p> <p>With <code>pipx</code>: <pre><code>python3.8 -m pip install --user pipx\npipx install griffe-typingdoc\n</code></pre></p> <p>To use the extension in a MkDocs project, use this configuration:</p> <pre><code># mkdocs.yml\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - griffe_typingdoc\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#022-2023-10-16","title":"0.2.2 - 2023-10-16","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Do not always add docstrings to attributes (02d8cb6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#021-2023-10-05","title":"0.2.1 - 2023-10-05","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix casing of <code>deprecated</code>, only set metadata when annotated element is known (98f3c2c by Sebasti\u00e1n Ram\u00edrez).</li> </ul>"},{"location":"changelog/#020-2023-09-14","title":"0.2.0 - 2023-09-14","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Depend on Griffe (cc15edc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support more experimental annotations (names, deprecations, warnings, exceptions) (afa6dd9 by Timoth\u00e9e Mazzucotelli). Issue #1, PR #3</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Refactor implementation with latest version in <code>typing_extensions</code>, <code>Doc()</code>, and de-indent (c7a61c6 by Sebasti\u00e1n Ram\u00edrez). PR #2</li> </ul>"},{"location":"changelog/#010-2023-08-29","title":"0.1.0 - 2023-08-29","text":"<p>Compare with first commit</p>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Always depend on typing-extensions, use @tiangolo's fork to test (33d242e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Support Python 3.8 thanks to typing-extensions (489aaac by Timoth\u00e9e Mazzucotelli).</li> <li>Implement extension (5fccd06 by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project with copier-pdm (10139be by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Update to support new proposal (https://peps.python.org/pep-0727/) (bd3eecd by Timoth\u00e9e Mazzucotelli).</li> <li>Use newer Griffe extensions (199609f by Timoth\u00e9e Mazzucotelli).</li> <li>Remove CLI setup (48dea50 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd griffe-typingdoc\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, see examples of tasks and run configurations.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build griffe-typingdoc. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.35</code> <code>0.36.5</code> ISC <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.7</code> <code>4.8.0</code> Python Software Foundation License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>1.4.4</code> MIT <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.13.0</code> BSD-3-Clause <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.1</code> <code>23.9.1</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.13</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.2</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.0.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.3</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11</code> <code>1.0.2</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=1.0</code> <code>2.3.1</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.37</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.35</code> <code>0.36.5</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.9</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.6.0.1.0.1</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of github committers and other useful GIT info such as last modified date <code>&gt;=1.1</code> <code>1.2.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.4.6+insiders.4.42.2</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.2</code> <code>1.2</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.6.4</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.18</code> <code>0.23.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.3.1.5.1</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.6.0</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.11.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.3</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.4.2</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.35</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0.246</code> <code>0.0.292</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.5</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.5.0.0</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.12</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.7</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.8.0rc1</code> <code>4.8.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.6</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> ? <p>More credits from the author</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#simple_1","title":"Simple","text":"<code>simple</code> Python module <pre><code>from __future__ import annotations\n\nfrom typing import (\n    Annotated,\n    Generator,\n    Iterator,\n    NotRequired,\n    TypedDict,\n    Unpack,\n    Doc,\n)\n\n# Documenting module/class attributes, replacing Attributes sections:\nATTRIBUTE: Annotated[\n    str,\n    Doc(\n        \"\"\"Showing off attributes.\n\n        Supporting multiple lines.\n        \"\"\"\n    )\n]\n\n\n# Documenting parameters, replacing Parameters sections:\ndef parameters(param1: Annotated[str, Doc(\"Description of param1.\")] = \"default\"):\n    \"\"\"Showing off parameters.\"\"\"\n\n\n# Documenting other parameters (keyword arguments), replacing Other Parameters sections:\nclass OtherParameters(TypedDict, total=False):\n    \"\"\"Keyword arguments of [`simple.other_parameters`][].\"\"\"\n    param1: Annotated[NotRequired[str], Doc(\"Description of param1.\")]\n    param2: Annotated[NotRequired[str], Doc(\"Description of param2.\")]\n\n\ndef other_parameters(\n    **kwargs: Annotated[Unpack[OtherParameters], Doc(\"See other parameters.\")],  # noqa: ARG001\n) -&gt; None:\n    \"\"\"Showing off other parameters.\"\"\"\n\n\n# Documenting yielded and received values, replacing Yields and Receives sections:\ndef generator() -&gt; (\n    Generator[\n        Annotated[int, Doc(\"Yielded integers.\")],\n        Annotated[int, Doc(\"Received integers.\")],\n        Annotated[int, Doc(\"Final returned value.\")],\n    ]\n):\n    \"\"\"Showing off generators.\"\"\"\n\n\n# Same thing with Iterator instead of Generator:\ndef iterator() -&gt; Iterator[Annotated[int, Doc(\"Yielded integers.\")]]:\n    \"\"\"Showing off iterators.\"\"\"\n\n\n# Advanced use-case: documenting multiple yielded/received/returned values:\ndef return_tuple() -&gt; (\n    Generator[\n        tuple[\n            Annotated[int, Doc(\"First element of the yielded value.\")],\n            Annotated[float, Doc(\"Second element of the yielded value.\")],\n        ],\n        tuple[\n            Annotated[int, Doc(\"First element of the received value.\")],\n            Annotated[float, Doc(\"Second element of the received value.\")],\n        ],\n        tuple[\n            Annotated[int, Doc(\"First element of the returned value.\")],\n            Annotated[float, Doc(\"Second element of the returned value.\")],\n        ],\n    ]\n):\n    \"\"\"Showing off tuples as yield/receive/return values.\"\"\"\n</code></pre>"},{"location":"examples/#simple","title":"simple","text":"<p>Classes:</p> <ul> <li> <code>OtherParameters</code>         \u2013          <p>Keyword arguments of <code>simple.other_parameters</code>.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>generator</code>           \u2013            <p>Showing off generators.</p> </li> <li> <code>iterator</code>           \u2013            <p>Showing off iterators.</p> </li> <li> <code>other_parameters</code>           \u2013            <p>Showing off other parameters.</p> </li> <li> <code>parameters</code>           \u2013            <p>Showing off parameters.</p> </li> <li> <code>return_tuple</code>           \u2013            <p>Showing off tuples as yield/receive/return values.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>ATTRIBUTE</code>             (<code>str</code>)         \u2013          <p>Showing off attributes.</p> </li> </ul>"},{"location":"examples/#simple.ATTRIBUTE","title":"ATTRIBUTE  <code>module-attribute</code>","text":"<pre><code>ATTRIBUTE: str\n</code></pre> <p>Showing off attributes.</p> <p>Supporting multiple lines.</p>"},{"location":"examples/#simple.OtherParameters","title":"OtherParameters","text":"<p>             Bases: <code>TypedDict</code></p> <p>Keyword arguments of <code>simple.other_parameters</code>.</p> <p>Attributes:</p> <ul> <li> <code>param1</code>             (<code>NotRequired[str]</code>)         \u2013          <p>Description of param1.</p> </li> <li> <code>param2</code>             (<code>NotRequired[str]</code>)         \u2013          <p>Description of param2.</p> </li> </ul>"},{"location":"examples/#simple.OtherParameters.param1","title":"param1  <code>instance-attribute</code>","text":"<pre><code>param1: NotRequired[str]\n</code></pre> <p>Description of param1.</p>"},{"location":"examples/#simple.OtherParameters.param2","title":"param2  <code>instance-attribute</code>","text":"<pre><code>param2: NotRequired[str]\n</code></pre> <p>Description of param2.</p>"},{"location":"examples/#simple.generator","title":"generator","text":"<pre><code>generator() -&gt; Generator[int, int, int]\n</code></pre> <p>Showing off generators.</p> <p>Yields:</p> <ul> <li> <code>int</code>         \u2013          <p>Yielded integers.</p> </li> </ul> <p>Receives:</p> <ul> <li> <code>int</code>         \u2013          <p>Received integers.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>Final returned value.</p> </li> </ul> Source code in <code>docs/examples/simple.py</code> <pre><code>def generator() -&gt; (\n    Generator[\n        Annotated[int, Doc(\"Yielded integers.\")],\n        Annotated[int, Doc(\"Received integers.\")],\n        Annotated[int, Doc(\"Final returned value.\")],\n    ]\n):\n    \"\"\"Showing off generators.\"\"\"\n</code></pre>"},{"location":"examples/#simple.iterator","title":"iterator","text":"<pre><code>iterator() -&gt; Iterator[int]\n</code></pre> <p>Showing off iterators.</p> <p>Yields:</p> <ul> <li> <code>int</code>         \u2013          <p>Yielded integers.</p> </li> </ul> Source code in <code>docs/examples/simple.py</code> <pre><code>def iterator() -&gt; Iterator[Annotated[int, Doc(\"Yielded integers.\")]]:\n    \"\"\"Showing off iterators.\"\"\"\n</code></pre>"},{"location":"examples/#simple.other_parameters","title":"other_parameters","text":"<pre><code>other_parameters(**kwargs: Unpack[OtherParameters]) -&gt; None\n</code></pre> <p>Showing off other parameters.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>             (<code>Unpack[OtherParameters]</code>, default:                 <code>{}</code> )         \u2013          <p>See other parameters.</p> </li> </ul> <p>Other Parameters:</p> <ul> <li> <code>param1</code>             (<code>NotRequired[str]</code>)         \u2013          <p>Description of param1.</p> </li> <li> <code>param2</code>             (<code>NotRequired[str]</code>)         \u2013          <p>Description of param2.</p> </li> </ul> Source code in <code>docs/examples/simple.py</code> <pre><code>def other_parameters(\n    **kwargs: Annotated[Unpack[OtherParameters], Doc(\"See other parameters.\")],  # noqa: ARG001\n) -&gt; None:\n    \"\"\"Showing off other parameters.\"\"\"\n</code></pre>"},{"location":"examples/#simple.parameters","title":"parameters","text":"<pre><code>parameters(param1: str = 'default')\n</code></pre> <p>Showing off parameters.</p> <p>Parameters:</p> <ul> <li> <code>param1</code>             (<code>str</code>, default:                 <code>'default'</code> )         \u2013          <p>Description of param1.</p> </li> </ul> Source code in <code>docs/examples/simple.py</code> <pre><code>def parameters(param1: Annotated[str, Doc(\"Description of param1.\")] = \"default\"):\n    \"\"\"Showing off parameters.\"\"\"\n</code></pre>"},{"location":"examples/#simple.return_tuple","title":"return_tuple","text":"<pre><code>return_tuple() -&gt; (\n    Generator[\n        tuple[int, float],\n        tuple[int, float],\n        tuple[int, float],\n    ]\n)\n</code></pre> <p>Showing off tuples as yield/receive/return values.</p> <p>Yields:</p> <ul> <li> <code>int</code>         \u2013          <p>First element of the yielded value.</p> </li> <li> <code>float</code>         \u2013          <p>Second element of the yielded value.</p> </li> </ul> <p>Receives:</p> <ul> <li> <code>int</code>         \u2013          <p>First element of the received value.</p> </li> <li> <code>float</code>         \u2013          <p>Second element of the received value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>First element of the returned value.</p> </li> <li> <code>float</code>         \u2013          <p>Second element of the returned value.</p> </li> </ul> Source code in <code>docs/examples/simple.py</code> <pre><code>def return_tuple() -&gt; (\n    Generator[\n        tuple[\n            Annotated[int, Doc(\"First element of the yielded value.\")],\n            Annotated[float, Doc(\"Second element of the yielded value.\")],\n        ],\n        tuple[\n            Annotated[int, Doc(\"First element of the received value.\")],\n            Annotated[float, Doc(\"Second element of the received value.\")],\n        ],\n        tuple[\n            Annotated[int, Doc(\"First element of the returned value.\")],\n            Annotated[float, Doc(\"Second element of the returned value.\")],\n        ],\n    ]\n):\n    \"\"\"Showing off tuples as yield/receive/return values.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced_1","title":"Enhanced","text":"<code>enhanced</code> Python module <pre><code># This gist shows how we could get rid of docstrings micro-syntax\n# like Google-style and Numpydoc-style pseudo-standards,\n# using an enhanced version of PEP 727.\n\n# The goal is to replace the following sections:\n\n# deprecated\n# Parameters\n# Other Parameters\n# Raises\n# Warns\n# Yields\n# Receives\n# Returns\n\nfrom __future__ import annotations\n\nfrom typing import (\n    Annotated,\n    Generator,\n    deprecated,\n    Doc,\n    Name,\n    Raises,\n    Warns,\n)\n\n\n# Documenting deprecations, replacing Deprecated sections:\nDEPRECATED: Annotated[\n    int,\n    deprecated(\n        \"\"\"Deprecated since v2.\n\n        Please stop using this deprecated attribute, thanks!\n        \"\"\"\n    ),\n    Doc(\"Showing off deprecated attributes.\"),\n]\n\n\n# For functions, maybe add the information to the return value annotation:\ndef deprecated1() -&gt; Annotated[None, deprecated(\"Deprecated since v2.\")]:\n    \"\"\"Showing off deprecated functions.\"\"\"\n\n\n# For parameters:\ndef deprecated2(param1: Annotated[int, deprecated(\"Deprecated since v2.\"), Doc(\"Description of param1.\")] = 0):\n    \"\"\"Showing off deprecated parameters.\"\"\"\n\n\n# Documenting exceptions, replacing Raises sections,\n# maybe add the information to the return value annotation:\ndef exceptions() -&gt; (\n    Annotated[\n        None,\n        Raises(ValueError, \"When something goes wrong.\"),\n        Raises(TypeError, \"When something goes even wronger.\"),\n    ]\n):\n    \"\"\"Showing off raised exceptions.\"\"\"\n\n\n# Documenting warnings, replacing Warns sections,\n# maybe add the information to the return value annotation:\ndef warnings() -&gt; (\n    Annotated[\n        None,\n        Warns(FutureWarning, \"Hello users.\"),\n        Warns(DeprecationWarning, \"Hello developers.\"),\n    ]\n):\n    \"\"\"Showing off emitted warnings.\"\"\"\n\n\n# Advanced use-case: documenting multiple yielded/received/returned values:\ndef return_tuple() -&gt; (\n    Generator[\n        tuple[\n            Annotated[int, Name(\"python\"), Doc(\"First element of the yielded value.\")],\n            Annotated[float, Name(\"cobra\"), Doc(\"Second element of the yielded value.\")],\n        ],\n        tuple[\n            Annotated[int, Name(\"beep\"), Doc(\"First element of the received value.\")],\n            Annotated[float, Name(\"boop\"), Doc(\"Second element of the received value.\")],\n        ],\n        tuple[\n            Annotated[int, Name(\"super\"), Doc(\"First element of the returned value.\")],\n            Annotated[float, Name(\"hyper\"), Doc(\"Second element of the returned value.\")],\n        ],\n    ]\n):\n    \"\"\"Showing off tuples as yield/receive/return values.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced","title":"enhanced","text":"<p>Functions:</p> <ul> <li> <code>deprecated1</code>           \u2013            <p>Showing off deprecated functions.</p> </li> <li> <code>deprecated2</code>           \u2013            <p>Showing off deprecated parameters.</p> </li> <li> <code>exceptions</code>           \u2013            <p>Showing off raised exceptions.</p> </li> <li> <code>return_tuple</code>           \u2013            <p>Showing off tuples as yield/receive/return values.</p> </li> <li> <code>warnings</code>           \u2013            <p>Showing off emitted warnings.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEPRECATED</code>             (<code>int</code>)         \u2013          <p>Showing off deprecated attributes.</p> </li> </ul>"},{"location":"examples/#enhanced.DEPRECATED","title":"DEPRECATED  <code>module-attribute</code>","text":"<pre><code>DEPRECATED: int\n</code></pre> Deprecated since v2. <p>Please stop using this deprecated attribute, thanks!</p> <p>Showing off deprecated attributes.</p>"},{"location":"examples/#enhanced.deprecated1","title":"deprecated1","text":"<pre><code>deprecated1() -&gt; None\n</code></pre> Deprecated since v2. <p>Showing off deprecated functions.</p> Source code in <code>docs/examples/enhanced.py</code> <pre><code>def deprecated1() -&gt; Annotated[None, deprecated(\"Deprecated since v2.\")]:\n    \"\"\"Showing off deprecated functions.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced.deprecated2","title":"deprecated2","text":"<pre><code>deprecated2(param1: int = 0)\n</code></pre> <p>Showing off deprecated parameters.</p> <p>Parameters:</p> <ul> <li> <code>param1</code>             (<code>int</code>, default:                 <code>0</code> )         \u2013          <p>Deprecated since v2. Description of param1.</p> </li> </ul> Source code in <code>docs/examples/enhanced.py</code> <pre><code>def deprecated2(param1: Annotated[int, deprecated(\"Deprecated since v2.\"), Doc(\"Description of param1.\")] = 0):\n    \"\"\"Showing off deprecated parameters.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced.exceptions","title":"exceptions","text":"<pre><code>exceptions() -&gt; None\n</code></pre> <p>Showing off raised exceptions.</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When something goes wrong.</p> </li> <li> <code>TypeError</code>           \u2013          <p>When something goes even wronger.</p> </li> </ul> Source code in <code>docs/examples/enhanced.py</code> <pre><code>def exceptions() -&gt; (\n    Annotated[\n        None,\n        Raises(ValueError, \"When something goes wrong.\"),\n        Raises(TypeError, \"When something goes even wronger.\"),\n    ]\n):\n    \"\"\"Showing off raised exceptions.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced.return_tuple","title":"return_tuple","text":"<pre><code>return_tuple() -&gt; (\n    Generator[\n        tuple[int, float],\n        tuple[int, float],\n        tuple[int, float],\n    ]\n)\n</code></pre> <p>Showing off tuples as yield/receive/return values.</p> <p>Yields:</p> <ul> <li> <code>python</code> (            <code>int</code> )        \u2013          <p>First element of the yielded value.</p> </li> <li> <code>cobra</code> (            <code>float</code> )        \u2013          <p>Second element of the yielded value.</p> </li> </ul> <p>Receives:</p> <ul> <li> <code>beep</code> (            <code>int</code> )        \u2013          <p>First element of the received value.</p> </li> <li> <code>boop</code> (            <code>float</code> )        \u2013          <p>Second element of the received value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>super</code> (            <code>int</code> )        \u2013          <p>First element of the returned value.</p> </li> <li> <code>hyper</code> (            <code>float</code> )        \u2013          <p>Second element of the returned value.</p> </li> </ul> Source code in <code>docs/examples/enhanced.py</code> <pre><code>def return_tuple() -&gt; (\n    Generator[\n        tuple[\n            Annotated[int, Name(\"python\"), Doc(\"First element of the yielded value.\")],\n            Annotated[float, Name(\"cobra\"), Doc(\"Second element of the yielded value.\")],\n        ],\n        tuple[\n            Annotated[int, Name(\"beep\"), Doc(\"First element of the received value.\")],\n            Annotated[float, Name(\"boop\"), Doc(\"Second element of the received value.\")],\n        ],\n        tuple[\n            Annotated[int, Name(\"super\"), Doc(\"First element of the returned value.\")],\n            Annotated[float, Name(\"hyper\"), Doc(\"Second element of the returned value.\")],\n        ],\n    ]\n):\n    \"\"\"Showing off tuples as yield/receive/return values.\"\"\"\n</code></pre>"},{"location":"examples/#enhanced.warnings","title":"warnings","text":"<pre><code>warnings() -&gt; None\n</code></pre> <p>Showing off emitted warnings.</p> <p>Warns:</p> <ul> <li> <code>FutureWarning</code>           \u2013          <p>Hello users.</p> </li> <li> <code>DeprecationWarning</code>           \u2013          <p>Hello developers.</p> </li> </ul> Source code in <code>docs/examples/enhanced.py</code> <pre><code>def warnings() -&gt; (\n    Annotated[\n        None,\n        Warns(FutureWarning, \"Hello users.\"),\n        Warns(DeprecationWarning, \"Hello developers.\"),\n    ]\n):\n    \"\"\"Showing off emitted warnings.\"\"\"\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/griffe_typingdoc/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> griffe_typingdoc","text":""},{"location":"reference/griffe_typingdoc/#griffe_typingdoc","title":"griffe_typingdoc","text":"<p>Griffe TypingDoc package.</p> <p>Griffe extension for PEP 727 - Documentation Metadata in Typing.</p> <p>Classes:</p> <ul> <li> <code>TypingDocExtension</code>         \u2013          <p>Griffe extension that reads documentation from <code>typing.Doc</code>.</p> </li> </ul>"},{"location":"reference/griffe_typingdoc/#griffe_typingdoc.TypingDocExtension","title":"TypingDocExtension","text":"<p>             Bases: <code>Extension</code></p> <p>Griffe extension that reads documentation from <code>typing.Doc</code>.</p> <p>Methods:</p> <ul> <li> <code>on_attribute_instance</code>           \u2013            <p>Post-process Griffe attributes to create their docstring.</p> </li> <li> <code>on_function_instance</code>           \u2013            <p>Post-process Griffe functions to add a parameters section.</p> </li> </ul>"},{"location":"reference/griffe_typingdoc/#griffe_typingdoc.TypingDocExtension.on_attribute_instance","title":"on_attribute_instance","text":"<pre><code>on_attribute_instance(\n    *, node: AST | ObjectNode, attr: Attribute\n) -&gt; None\n</code></pre> <p>Post-process Griffe attributes to create their docstring.</p> <p>Parameters:</p> <ul> <li> <code>node</code>             (<code>AST | ObjectNode</code>)         \u2013          <p>The object/AST node describing the attribute or its definition.</p> </li> <li> <code>attr</code>             (<code>Attribute</code>)         \u2013          <p>The Griffe attribute just instantiated.</p> </li> </ul> Source code in <code>src/griffe_typingdoc/_extension.py</code> <pre><code>def on_attribute_instance(\n    self,\n    *,\n    node: Annotated[\n        ast.AST | ObjectNode,\n        Doc(\"The object/AST node describing the attribute or its definition.\"),\n    ],\n    attr: Annotated[\n        Attribute,\n        Doc(\"The Griffe attribute just instantiated.\"),\n    ],\n) -&gt; None:\n    \"\"\"Post-process Griffe attributes to create their docstring.\"\"\"\n    module = _dynamic if isinstance(node, ObjectNode) else _static\n\n    new_sections = (\n        docstring := module._attribute_docs(node, attr),\n        deprecated_section := module._deprecated_docs(node, attr),\n        raises_section := module._raises_docs(node, attr),\n        warns_section := module._warns_docs(node, attr),\n    )\n\n    if not any(new_sections):\n        return\n\n    if not attr.docstring:\n        attr.docstring = Docstring(docstring, parent=attr)\n\n    sections = attr.docstring.parsed\n\n    if deprecated_section := module._deprecated_docs(node, attr):\n        sections.insert(0, deprecated_section)\n\n    if raises_section := module._raises_docs(node, attr):\n        sections.append(raises_section)\n\n    if warns_section := module._warns_docs(node, attr):\n        sections.append(warns_section)\n</code></pre>"},{"location":"reference/griffe_typingdoc/#griffe_typingdoc.TypingDocExtension.on_function_instance","title":"on_function_instance","text":"<pre><code>on_function_instance(\n    *, node: AST | ObjectNode, func: Function\n) -&gt; None\n</code></pre> <p>Post-process Griffe functions to add a parameters section.</p> <p>Parameters:</p> <ul> <li> <code>node</code>             (<code>AST | ObjectNode</code>)         \u2013          <p>The object/AST node describing the function or its definition.</p> </li> <li> <code>func</code>             (<code>Function</code>)         \u2013          <p>The Griffe function just instantiated.</p> </li> </ul> Source code in <code>src/griffe_typingdoc/_extension.py</code> <pre><code>def on_function_instance(\n    self,\n    *,\n    node: Annotated[\n        ast.AST | ObjectNode,\n        Doc(\"The object/AST node describing the function or its definition.\"),\n    ],\n    func: Annotated[\n        Function,\n        Doc(\n            # Multiline docstring to test de-indentation.\n            \"\"\"\n            The Griffe function just instantiated.\n            \"\"\",\n        ),\n    ],\n) -&gt; None:\n    \"\"\"Post-process Griffe functions to add a parameters section.\"\"\"\n    module = _dynamic if isinstance(node, ObjectNode) else _static\n\n    yields_section, receives_section, returns_section = module._yrr_docs(node, func)\n    new_sections = (\n        deprecated_section := module._deprecated_docs(node, func),\n        params_section := module._parameters_docs(node, func),\n        other_params_section := module._other_parameters_docs(node, func),\n        warns_section := module._warns_docs(node, func),\n        raises_section := module._raises_docs(node, func),\n        yields_section,\n        receives_section,\n        returns_section,\n    )\n\n    if not any(new_sections):\n        return\n\n    if not func.docstring:\n        func.docstring = Docstring(\"\", parent=func)\n\n    sections = func.docstring.parsed\n\n    if other_params_section:\n        sections.insert(1, other_params_section)\n\n    if params_section:\n        sections.insert(1, params_section)\n\n    if deprecated_section:\n        sections.insert(0, deprecated_section)\n\n    if raises_section:\n        sections.append(raises_section)\n\n    if warns_section:\n        sections.append(warns_section)\n\n    if yields_section:\n        sections.append(yields_section)\n\n    if receives_section:\n        sections.append(receives_section)\n\n    if returns_section:\n        sections.append(returns_section)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}